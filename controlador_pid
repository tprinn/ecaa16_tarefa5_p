import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from sensor_msgs.msg import LaserScan
import tf
import math
import random

#COORDENADA DA LOCALIZACAO DO OBJETO------------------------------------------------
matricula = 2016000168
random.seed(matricula)
x = 0
y = 0
while x**2 + y**2 > 4**2 or x**2 + y**2 < 2**2:
    x = random.random() * 8 - 4
    y = random.random() * 8 - 4
print(x, y)
#-----------------------------------------------------------------------------------


#CONSTANTES DO CONTROLADOR PID------------------------------------------------------
kp = 0.01
ki = 0.01
kd = 0.01
#-----------------------------------------------------------------------------------

#DEFINICAO VARIAVEIS----------------------------------------------------------------
odom = Odometry()
scan = LaserScan()
#-----------------------------------------------------------------------------------

#INICIALIZACAO DO NO----------------------------------------------------------------
rospy.init_node('cmd_node')
#-----------------------------------------------------------------------------------


#a mÃ©dia da soma dos numeros das matriculas dos membros deu 24,75. Arredondou-se a frequencia para 25 vezes por segundo  
timer = rospy.Timer(rospy.Duration(0.25), timerCallBack)
TempoTotal += timer
dt = TempoTotal - timer 


#FUNCAO QUE RETORNA ANGULO------------------------------------------------------
def getAngle(msg):
  quaternion = msg.pose.pose.orientation 
  quat = [quaternion.x, quaternion.y, quaternion.z, quaternion.]
  euler = tf.transformations.euler_from_quaternion(quat)
  yaw = euler[2]*180.0/math.pi
  return yaw
#-----------------------------------------------------------------------------------

#CALLBACKS--------------------------------------------------------------------------  
def odomCallBack(msg):
  global odom
  odom = msg

def scanCallBack(msg):
  global scan
  scan = msg
#-----------------------------------------------------------------------------------

#TIMER - CONTROLE DO LOOP----------------------------------------------------------- 
def timerCallBack(event):

  #ANGULO-----------------------------------------------------------
  yaw = getAngle(odom)
  setpoint = 120
  erro = (setpoint - yaw)
  
  if abs(erro) > 180:
    if setpoint<0
        erro += 360
    else:
        erro -= 360
  
  
    
  #DISTANCIA-----------------------------------------------------------
  setpoint = (-1,-1)
  dist = odom.pose.pose.position
  dist = setpoint[0] - position.x #math.sqrt((setpoint[0]-position.x)**2 + (setpoint[1]-position.y)**2)
  erro = dist
  if dist > 0:
    erro = -(setpoint - dist)  
    P = kp*erro
    #I = I + erro*ki
    I += (erro*ki)*dt
    D = ((lastDist - dist)*kd)*dt
    lastDist = dsit
    control = P+I+D
    if control > 1:
       control = 1
    elif control < -1:
       control = -1     
  else:
    control = 0
  
  
  
  
  #OBSTACULO-----------------------------------------------------------
  setpoint = 0.5
  scan_len = len(scan.ranges) 

  if scan_len > 0:
    read = min(scan.ranges[scan_len-10 : scan_len+10])
    erro = -(setpoint - read)  
    P = kp*erro
    #I = I + erro*ki
    I += (erro*ki)*dt
    D = ((lastRead - read)*kd)*dt
    lastRead = read
    control = P+I+D
    if control > 1:
       control = 1
    elif control < -1:
       control = -1       
  else:
    control = 0
 
 
  msg = Twist()
  msg.angular.z = control
  pub.publish(msg)
#-----------------------------------------------------------------------------------



#PUBLISHER E SUBSCRIBER-------------------------------------------------------------
pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
odom_sub = rospy.Subscriber('/odom', Odometry, odomCallBack)
scan_sub = rospy.Subscriber('/scan', LaserScan, scanCallBack)


rospy.spin()
